---
   - name: Install the required packages
     apt: pkg={{ item }} state=latest
     with_items:
       - clang-4.0
       - lldb-4.0
       - libclang-4.0-dev
       - cmake
       - make
       - automake
       - libbz2-dev
       - libssl-dev
       - libgmp3-dev
       - autotools-dev
       - build-essential
       - libicu-dev
       - python2.7-dev
       - python3-dev
       - autoconf
       - libtool
       - curl
       - zlib1g-dev
       - doxygen
       - graphviz
       - git
       - expect
     become: true
     tags: installEos

   - name: Check catalog /home/eos-source
     stat: path={{eos_source_dir}}
     register: eos_catalog_stat
     tags: installEos

   - name: Make dir /home/eos-sources
     file: path={{eos_source_dir}} owner=eosuser group=eosuser mode=0777
           state=directory
     when: eos_catalog_stat.stat.exists != true
     become: true
     tags: installEos

   - name: Git clone EOS repo
     git:
       repo: '{{eos_git_repo}}'
       dest: "{{eos_source_dir}}"
     tags: installEos

   - name: Git checkout and update submodules
     shell: "cd {{eos_source_dir}}/ && git checkout {{branch}} && git submodule update --init --recursive"
     tags: installEos

#   - name: Compile eos (pexpect does not work correctly!!!)
#     expect:
#       command: /bin/bash -c "{{eos_source_dir}}/./eosio_build.sh -s EOS 2>&1> {{eos_source_dir}}/install.log.txt"
#       responses:
#         '#?': '1'
#         '\[sudo\] password for eosuser:': '{{sudopass}}'
#     chdir: "{{eos_source_dir}}"
#     tags: installEos

   - name: Compile EOS using shell module
     shell: |
       set timeout -1
       spawn /bin/bash -c "{{eos_source_dir}}/./eosio_build.sh -s EOS 2>&1> {{eos_source_dir}}/install.log.txt"

       expect '#?'
       send '1\n'

       expect '\[sudo\] password for eosuser:'
       send '{{sudopass}}\n'
     args:
       executable: /usr/bin/expect
       chdir: "{{eos_source_dir}}"
     tags: installEos


   - name: Check Eos datadir 
     stat: path={{eos_dir}}
     register: eos_dir_stat
     tags: installEosRunner

   - name: Make dir of eos data
     file: path={{eos_dir}} owner=eosuser group=eosuser mode=0775
           state=directory
     when: eos_dir_stat.stat.exists != true
     become: true
     tags: installEosRunner

   - name: Git clone EOS-MainNet
     git:
       repo: 'https://github.com/CryptoLions/EOS-MainNet.git'
       dest: "{{eos_dir}}"
     tags: installEosRunner 

   - name: Check Eos stop.sh
     stat: path={{eos_dir}}/stop.sh
     register: eos_stop_stat
     tags: installEosRunner

   - name: Delete old stop.sh
     file: path={{eos_dir}}/stop.sh
           state=absent
     when: eos_stop_stat.stat.exists == true
     tags: installEosRunner

   - name: Create Eos stop.sh
     template: src=stop.sh.j2 dest={{eos_dir}}/stop.sh owner=eosuser group=eosuser
     tags: installEosRunner

   - name: Check Eos start.sh
     stat: path={{eos_dir}}/start.sh
     register: eos_start_stat
     tags: installEosRunner

   - name: Delete old start.sh
     file: path={{eos_dir}}/start.sh
           state=absent
     when: eos_start_stat.stat.exists == true
     tags: installEosRunner

   - name: Create Eos start.sh
     template: src=start.sh.j2 dest={{eos_dir}}/start.sh owner=eosuser group=eosuser
     tags: installEosRunner

   - name: Check Eos cleos.sh
     stat: path={{eos_dir}}/cleos.sh
     register: eos_cleos_stat
     tags: installEosRunner

   - name: Delete old cleos.sh
     file: path={{eos_dir}}/cleos.sh
           state=absent
     when: eos_cleos_stat.stat.exists == true
     tags: installEosRunner

   - name: Create Eos cleos.sh
     template: src=cleos.sh.j2 dest={{eos_dir}}/cleos.sh owner=eosuser group=eosuser
     tags: installEosRunner

   - name: Check Eos backup.sh
     stat: path={{eos_dir}}/backup.sh
     register: eos_backup_stat
     tags: installEosRunner

   - name: Delete old backup.sh
     file: path={{eos_dir}}/backup.sh
           state=absent
     when: eos_backup_stat.stat.exists == true
     tags: installEosRunner

   - name: Check Eos backups dir
     stat: path={{backup_dir}}/backups
     register: eos_backups_stat
     tags: installEosRunner

   - name: Make dir backups
     file:
       path: "{{backup_dir}}/backups"
       state: directory
       mode: 0755
     when: eos_backup_stat.stat.exists != true
     tags: installEosRunner

   - name: Create Eos backup.sh
     template: src=backup.sh.j2 dest={{eos_dir}}/backup.sh owner=eosuser group=eosuser
     tags: installEosRunner

   - name: Chmod executable files
     shell: "chmod -R 777 {{eos_dir}}/*.sh"
     tags: installEosRunner

   - name: Check Eos config.ini
     stat: path={{eos_dir}}/config.ini
     register: eos_conf_stat
     tags: configEos

   - name: Delete old config.ini
     file: path={{eos_dir}}/config.ini
           state=absent
     when: eos_conf_stat.stat.exists == true
     tags: configEos

   - name: Create Eos config.ini
     template: src=config.ini.j2 dest={{eos_dir}}/config.ini owner=eosuser group=eosuser
     tags: configEos
     
   - name: stop nodeos
     shell: "{{eos_dir}}/./stop.sh"
     tags: backupEos

   - pause: seconds=30

   - name: Check if directory exist
     shell: "ls {{backup_dir}} | grep $(date +%y%m%d)-backup-eos | wc -l"
     register: catalog_stat
     tags: backupEos

   - name: Remove directory if exist
     shell: "rm -rf {{backup_dir}}/$(date +%y%m%d)-backup-eos"
     when:
       - remote_copy == "0"
       - catalog_stat.stdout == "1"
     tags: backupEos

   - name: backup nodeos
     shell: "mkdir {{backup_dir}}/$(date +%y%m%d)-backup-eos && rsync -av {{eos_dir}} {{backup_dir}}/$(date +%y%m%d)-backup-eos"
     args:
       chdir: "{{eos_dir}}"
       warn: false
     when:
       - remote_copy == "0"
       - catalog_stat.stdout == "0"
     tags: backupEos

   - name: backup nodeos to a remote server
     shell: "tar czf - {{eos_dir}} | ssh attic@{{ipnode}} 'cd {{remote_backup_dir}} && tar xvzf -'"
     args:
       chdir: "{{eos_dir}}"
       warn: false
     when:
       - remote_copy == "1"
     tags: backupEos

   - name: start nodeos
     shell: "nohup {{eos_dir}}/./start.sh </dev/null >/dev/null 2>&1 &"
     tags: backupEos

